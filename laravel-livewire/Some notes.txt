Curso: https://www.youtube.com/watch?v=Ax4pT8XDR-0&list=PLZ2ovOgdI-kWqCet33O0WezN14KShkwER&ab_channel=CodersFree





*Para comandos y demás fijarse que se esté dentro de carpeta con el proyecto: comando " cd .\laravel-livewire\ " para ir dentro





***Se tiene proyecto en Repo, por lo que consideraciones al momento de clonar:
-Si no está el archivo .env, generarlo, a partir de archivo "env.txt"
-Comando "composer install"
-Comando "npm install"
-Si marca errror: " Database file at path [C:\laragon\www\laravel-livewire\laravel-livewire\database\database.sqlite] does not exist. Ensure this is an absolute path to the database. (Connection: sqlite, SQL: select * from "sessions" where "id" = g1OjctZ0WYLkV9JqmeVnhVGLgadKYbccaB1mjk2M limit 1) ":
    *en archivo ".env" cambiar de "sqlite" a "mysql"
-Si marca error: " SQLSTATE[HY000] [1049] Unknown database 'laravel' (Connection: mysql, SQL: select * from `sessions` where `id` = VInTp5ld5Y5875EOnudYtDZfpC68BXtLOYOvrC7M limit 1) ":
    *comando " php artisan migrate " (si indica " The database 'laravel' does not exist on the 'mysql' connection. Would you like to create it? (yes/no) " poner "y", aunque sea para que jale por mientras, ya después si es el caso se cambiaría la referencia a otra BD)
-Si marca error: " Vite manifest not found at: C:\laragon\www\laravel-livewire\laravel-livewire\public\build/manifest.json "
    *Abrir una terminal y ejecutar comando "npm run dev" (esto es para que detecte Tailwind, ya que "@vite" es una directiva de Tailwind que se está empleando)
    *Abrir otra terminal y ejecutar "php artisan serve"
-CREAR LA BD ("laravel_livewire" conCHARACTER SET utf8mb4 y COLLATE utf8mb4_spanish_c) CORRESPONDIENTE EMPLEADA Y/O REFERENCIADA EN ARCHIVO .env, ASÍ COMO COLOCAR LA CONTRASEÑA CORRESPONDIENTE A LA MÁQUINA LOCAL DONDE SE ESTÉ CORRIENDO EL PROYECTO, ASÍ COMO EJECUTAR LAS MIGRACIONES CORRESPONDIENTES SI ES EL CASO, CON "php artisan migrate", Y DE IGUAL FORMA LOS SEEDER Y DEMÁS COSAS QUE SE EMPLEARON EN PASOS POSTERIORES PARA POBLAR ALGUNAS TABLAS Y ASÍ.





First notes:
Se empleará Jetstream también, por lo que se requiere Node.js. 
Cuando se instala Jetstream, también "viene incluido" Livewire (Esto por la parte de la instalación donde se elige que emplear para el Frontend... si es Livewire se trabajará con PHP y si es Inertia.js será con JS.), en este caso se trabajará con Livewire. Y se irá personalizando lo que genera Jetstream, así como agregando cosas.

Comandos empleados:
*Primero se creo repo en GitHub, se abrió VS Code, se abre terminal, nos cambiamos a escritorio (" cd .\Desktop\ "), ahora si: 
" git clone https://github.com/erickavendanoh/laravel-livewire.git "
*Abrimos la carpeta donde está creada la clonación*
" node -v " (para ver que Node si esté instalado)
" composer -v " (para ver que Composer si esté instalado)
" composer create-project laravel/laravel laravel-livewire "
" cd .\laravel-livewire\ "
" php artisan serve "  (para ver que jale)
" composer require laravel/jetstream "
" php artisan jetstream:install livewire "
*si pregunta si se quieren volver a correr las migraciones porque se agregaron nuevas: poner "y"
" npm install "
" npm run build "
" php artisan migrate "
" php artisan serve "  (para ver que jale)

Ya una vez creado proyecto de Laravel, junto con Jetsream, en ruta "/dashboard" se puede apreciar la vista "dashboard.blade.php" (nos referimos ahora a "dashboard.blade copy.php", que fue una copia del archivo "dashboard.blade.php" que se crea por defecto al principio cuando se crea el proyecto (es de la parte de Jetsream), ubicado en resources/views, pero como el original se fue modificando por eso se deja la copia como referencia), donde al analizarlo se puede ver que emplea como plantilla "app.blade.php" (igual que con "dashboard", al original de este que se crea cuando recién se crea el proyecto también se le creo una copia, "app.blade copy.php"), ubicado dentro de resources/views/layouts, el cual ya incluye las directivas de Livewire "@livewireStyles" y "@livewireScripts" que corresponden a los estilos y scripts que emplea Livewire respectivamente, por lo que las vistas que empleen "app.blade.php" como plantilla ya incluiran lo requerido para emplear Livewire, y asimismo se puede notar que "app.blade.php" actúa más como componente de blade que como plantilla (por uso de $slot y slots con nombre, a los cuales se les da valor cuando se emplea en otras vistas, en lugar de los "@yield()" y así). Dentro de esa vista "dashboard.blade.php" también se emplean componentes, como el correspondiente a "welcome.blade.php", ubicada en resources/views/components (de igual forma, se le creo su copia del archivo original que se crea recién creado el proyecto, "welcome.blade copy.php") (empleado usando "<x-welcome />" en "dashboard")

IMPORTANTE: POR MOTIVOS DE AGILIZAR LA TOMA DEL CURSO, NO SE ESTARÍAN TOMANDO NOTAS TAN RIGUROSAS COMO HA SIDO EN OTROS CASOS. LOS ARCHIVOS QUE SE GENERAN CUANDO RECIÉN SE CREA EL PROYECTO (PROPIOS DE LARAVEL, TAILWIND, JETSTREAM, ETC.) SE IRÁN MODIFICANDO, ES POR ELLO QUE SE HICIERON LAS COPIAS DE ALGUNOS DE LOS PRIMEROS ARCHIVOS QUE SE GENERAN AL PRINCIPIO CUANDO RECIÉN SE CREA UN PROYECTO CON ESAS TECNOLOGÍAS. PERO EN ADELANTE SERÁ SOLO IR TOMANDO EL CURSO "COMO VA" PRÁCTICAMENTE.
    *SI SE QUIEREN REPASAR CONCEPTOS DE COMPONENTES BLADE (DE CLASE Y ANÓNIMOS), ALGO DE JESTREAM Y/O IMPLEMENTACIÓN DE TAILWIND, VER REPO: https://github.com/erickavendanoh/laravel-jetsream-inicio-y-componentes-blade





Comandos and beyond:
" php artisan make:livewire ShowPosts "



Para que el contenido correspondiente a las vistas de los componentes se renderice correctamente, todo debe ir dentro de los <div> que se crean por defecto dentro de sus archivos .blade.php ("front") cuando estos se crean



Las dos formas de emplear un componente de Livewire dentro de una vista son:
@livewire('*nombre del componente*')  ("forma antigua")
<livewire:*nombre del componente* />  ("forma más actual")



*Importante: Cuandos se quieran reutilizar ciertas porciones de código (correspondientes a elementos que tienen la misma estructura y se emplean en varias partes de la página como pueden ser tablas, alerts, o secciones en general que se repitan en sitio web) que se repite y solo cambia algunos valores (que pueden ser pasados como parámetros) no se recomienda mucho usar los componentes de Livewire, sino en esos casos serían mejor los componentes de Blade. Los componentes de Livewire se emplearían para agregar reactividad (actualización o muestras de información sin necesidad de refrescar la página) en algunas partes o secciones de la página donde se requiera



" php artisan make:livewire *nombre de subcarpeta*/*nombre del componente* " (Para crear los archivos correspondientes al componente que se está creando dentro de una subcarpeta dentro de las de "Livewire" tanto en "app" como en "resources/views", donde si no existe esa subcarpeta la crea también) ej. " php artisan make:livewire Nav/ShowPosts "
Para llamarlos desde las vistas cuando es así, es igual, solo que anteponiendo el nombre de la carpeta y un "." donde va el nombre del componente



El primer componente creado fue "ShowPosts" (por tema de comentarios de funcionalidad de algunas cosas)



Los valores que se pasen como parámetros a un componente de Livewire desde las vistas corresponderán a los atributos en su clase (Back, archivo .php), y se pasarán como en este ejemplo: " <livewire:show-posts title="Este es un titulo de prueba" /> ", donde en el back del componente (archivo .php) iría esto:" public $title; " y en su front (archivo .blade.php) se emplearía así: " {{$title}} " (colocado en la parte correspondiente donde se quiera mostrar)
En caso de que no se quiera asignar el valor al atributo directamente desde la vista, se puede emplear la función mount(), la cual no se llama explicitamente sino que lo que se le ponga como parámetro serán las variables a las que se les de valor desde las llamadas en las vistas del componente (donde el nombre del parámetro y la asignación del valor del mismo desde la vista deben corresponder), y ya dentro de esa función se le asigna ese valor al atributo correspondiente, el cual es el que se usa en el "front" (archivo blade.php) del componente, por ejemplo:
en back quedaría algo así:
"
    public $titulo; 

    public function mount($title){
        $this->titulo = $title;
    }
"
en front se emplearía igual, con los "{{}}", pero emplenado su atributo que es al que se le está dando valor: " {{$titulo}} ". Y en la vista donde se llama al componente sería: " <livewire:show-posts title="Este es un titulo de prueba" /> " (se le asigna valor a $title, que es el parámetro de mount() el cuál dentro le asigna ese valor al atributo $titulo del componente)



Si bien los componentes de Livewire se emplean en casos donde solo ciertas secciones o partes de una página requieren reactividad, también habrán casos de páginas completas que necesiten ser reactivas. Para esos casos se puede crear un componente que corresponderá a toda esa página y su Back (archivo .php) podrá fungir como controlador y su Front (archivo blade.php) podrá fungir como la vista de ese controlador (esto para aspectos del web.php, puediéndolos definir con rutas determinadas). Esto sería mejor que tener un controlador y una vista normales, donde dentro de esta se llamen un montón de componentes de Livewire (los cuales se tendrán que crear y definir previamente), y teniendo muchos más archivos.
Para hacer esto, en archivo web.php se debe importar el componente de Livewire (por ejemplo: " use App\Livewire\ShowPosts; "). Y en la ruta correspondiente, solo se coloca lo que iría en la url y el nombre del componente a manera de controlador (con el "::class" adelante), quedando por ejemplo: " Route::get('/dashboard', ShowPosts::class)->name('dashboard'); ", y ya la vista que se mostrará es la indicada en método "render()" del componente, que generalmente correspondería a su archivo front. 
Por defecto cuando se hace esto, el layout o plantilla que se carga por defecto y en la que dentró se contendrá el contenido del componente es la de resources/views/layouts/app.blade.php (en teoría ya la reconoce por defecto, pero en mi caso tuve que indicar expicitamente que trabajará con ella con " ->layout('layouts.app'); " dentro del método render() en el back del componente después del " return view(...) ", ya que de lo contrario marcaba error, donde al parecer quería buscar la plantilla en carpeta "components").
Asimismo, se le puede indicar que emplee otra plantilla diferente a la que emplearía por defecto, que sería app.blade.php, como puede ser otra llamada "base.blade.php" (creada previamente dentro de resources/views/layouts/) por ejemplo, quedando así el método render() dentro del back del componente:
"
public function render()
    {
        return view('livewire.show-posts')
                ->layout('layouts.base');
    }
"

Nota: para apreciar mejor el flujo de donde se va colocando la información del contenido de un componente cuando se define a manera de controlador, en un momento dentro del front del componente ShowPosts se coloco: 
" 
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Dashboard') }}
        </h2>
    </x-slot>
"
esto ya que en su back se definió que emplará el layout "app.blade.php" con: " ->layout('layouts.app'); "
y se notó que el contenido del componente (front) se coloca en parte de "$slot" dentro de app.blade.php, y ese código correspondiente al slot con nombre, "header", para ver que se colocaba nuevamente (aparte del que ya está por defecto) en parte de "$header", que corresponde a slot con nombre "header" (todo esto también va relacionado a tema componentes de blade, que es con lo que también trabaja Jetstream).



Para obtener los valores que se mandan por url en una ruta, por ejemplo una definida en web.php que sea: " Route::get('prueba/{name}', ShowPosts::class); ", en back del componente quedaría:
"
    public $nombreParteComponente;

    public function mount($name){ //El nombre del parámetro en mount() debe corresponder al definido en ruta 
        $this->nombreParteComponente = $name;
    }

"
y en el front ya se emplearía con: " {{$nombreParteComponente}} ", donde por ejemplo en la url: " http://127.0.0.1:8000/prueba/erick " se mostraría "erick" en esa parte donde se emplea el atributo.





Para parte de ver como recuperar información de BD desde el back de un componente y esa pasarla y emplearla en su front:

Antes:
-Se creó BD "laravel_livewire" en MySQL, con CHARACTER SET utf8mb4 y COLLATE utf8mb4_spanish_c.
-Se modificó el .env cambiando lo de "sqlite" a "mysql", así como el nombre de la BD y la contraseña correspondiente a ambiente local.
-Comando "php artisan migrate"

Luego:
-" php artisan make:model Post -m -f " (que se cree tanto el modelo (app/Models) con su respectiva migración (database/migrations), así como de una vez su Factory (database/factories) correspondientes)
*Recordar que los factories son donde se define la información que se le va a asignar a ciertos campos correspondientes a un modelo dentro de su respectiva tabla en la BD, generalmente se usan con "->faker" el cual genera valores aleatorios distintos para cada registro. Y el seeder es donde se indica cuantas veces ejecutar el factory de un modelo en especifico, es decir cuántos registros se generarán en la tabla correspondiente a dicho modelo en abse a lo definido en su factory.
-Se le definieron otros campos que tendrá la tabla correspondiente al modelo en la BD en su archivo de migración (el "...create_..." dentro de database/migrations)
-Luego se definieron los valores que se le asignaran a esos campos, empleando "faker", en su respectivo archivo de Factory. Ejemplo: 
 "
    public function definition(): array
    {
        return [
        'title' => $this->faker->sentence(),
        'content' => $this->faker->text()
        ];
    }
 "
 Donde "sentence()" define una sentencia en ese campo, mientras que "text()" genera un texto de relleno
-Luego en el archivo "DatabaseSeeder.php" (dentro de database/seeders), en el método run() (que es el que se ejecuta con comando " php artisan db:seed ") se definio la cantidad de veces (cantidad de registros a generar) que se ejcutará el Factory del modelo. Ej. "  \App\Models\Post::factory(100)->create(); "
-Luego en el archivo del modelo (dentro de app/Models) se habilita la asignación masiva. Con algo como: " protected $fillable = ['title', 'content']; " (los campos considerados son los que se poblaran con factory y seeder) 
-" php artisan migrate:fresh --seed " (vuelve a generar las tablas pero a la vez ejecuta los seeders. Considerar que al emplear "migrate:fresh" se borran los registros que se tenían también)

Ya para recuperar la información de la BD desde el back del componente y emplearla/mostrarla su front es igual que como se haría con un controlador y vista normales. Por ejemplo:
en su back:
"
    use Livewire\Component;
    use App\Models\Post;

    class ShowPosts extends Component
    {
        public function render()
        {
            $posts = Post::all();

            return view('livewire.show-posts', compact('posts'))
                    ->layout('layouts.app');
        }
    }
"
y en su front ya solo se mostraría o usaría con: "{{$posts}}"





Estilos de Tailwind, así como algunos componentes sacados de: https://tailwindcomponents.com/ (ya dentro en "Components" se buscan los que se emplearán)





Hay una extensión llamada "Laravel Blade Formatter", que es como un Prettier, sirve para acomodar e identar el código.





Se emplearán diseños de Tailwind ya hechos, de componentes y así, de: https://tailwindcomponents.com/
Y como a veces es el caso en que hay muchos <div> con las clases que se emplean de Tailwind y así, tenerlo todo en un mismo archivo no lo hace tan cómodo visualmente hablando. Para esto se emplearán componentes de blade.
Por ejemplo, se empleo este diseño de tabla sacado de esa página:
<!-- component -->
<div class="bg-white p-8 rounded-md w-full">
	<div class=" flex items-center justify-between pb-6">
		<div>
			<h2 class="text-gray-600 font-semibold">Products Oder</h2>
			<span class="text-xs">All products item</span>
		</div>
		<div class="flex items-center justify-between">
			<div class="flex bg-gray-50 items-center p-2 rounded-md">
				<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" viewBox="0 0 20 20"
					fill="currentColor">
					<path fill-rule="evenodd"
						d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z"
						clip-rule="evenodd" />
				</svg>
				<input class="bg-gray-50 outline-none ml-1 block " type="text" name="" id="" placeholder="search...">
          </div>
				<div class="lg:ml-40 ml-10 space-x-8">
					<button class="bg-indigo-600 px-4 py-2 rounded-md text-white font-semibold tracking-wide cursor-pointer">New Report</button>
					<button class="bg-indigo-600 px-4 py-2 rounded-md text-white font-semibold tracking-wide cursor-pointer">Create</button>
				</div>
			</div>
		</div>
		<div>
			<div class="-mx-4 sm:-mx-8 px-4 sm:px-8 py-4 overflow-x-auto">
				<div class="inline-block min-w-full shadow rounded-lg overflow-hidden">
					<table class="min-w-full leading-normal">
						<thead>
							<tr>
								<th
									class="px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
									Name
								</th>
								<th
									class="px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
									products
								</th>
								<th
									class="px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
									Created at
								</th>
								<th
									class="px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
									QRT
								</th>
								<th
									class="px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
									Status
								</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
									<div class="flex items-center">
										<div class="flex-shrink-0 w-10 h-10">
											<img class="w-full h-full rounded-full"
                                                src="https://images.unsplash.com/photo-1494790108377-be9c29b29330?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2.2&w=160&h=160&q=80"
                                                alt="" />
                                        </div>
											<div class="ml-3">
												<p class="text-gray-900 whitespace-no-wrap">
													Vera Carpenter
												</p>
											</div>
										</div>
								</td>
								<td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
									<p class="text-gray-900 whitespace-no-wrap">Admin</p>
								</td>
								<td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
									<p class="text-gray-900 whitespace-no-wrap">
										Jan 21, 2020
									</p>
								</td>
								<td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
									<p class="text-gray-900 whitespace-no-wrap">
										43
									</p>
								</td>
								<td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
									<span
                                        class="relative inline-block px-3 py-1 font-semibold text-green-900 leading-tight">
                                        <span aria-hidden
                                            class="absolute inset-0 bg-green-200 opacity-50 rounded-full"></span>
									<span class="relative">Activo</span>
									</span>
								</td>
							</tr>
							<tr>
								<td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
									<div class="flex items-center">
										<div class="flex-shrink-0 w-10 h-10">
											<img class="w-full h-full rounded-full"
                                                src="https://images.unsplash.com/photo-1500648767791-00dcc994a43e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2.2&w=160&h=160&q=80"
                                                alt="" />
                                        </div>
											<div class="ml-3">
												<p class="text-gray-900 whitespace-no-wrap">
													Blake Bowman
												</p>
											</div>
										</div>
								</td>
								<td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
									<p class="text-gray-900 whitespace-no-wrap">Editor</p>
								</td>
								<td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
									<p class="text-gray-900 whitespace-no-wrap">
										Jan 01, 2020
									</p>
								<td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
									<p class="text-gray-900 whitespace-no-wrap">
										77
									</p>
								</td>
								<td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
									<span
                                        class="relative inline-block px-3 py-1 font-semibold text-green-900 leading-tight">
                                        <span aria-hidden
                                            class="absolute inset-0 bg-green-200 opacity-50 rounded-full"></span>
									<span class="relative">Activo</span>
									</span>
								</td>
							</tr>
							<tr>
								<td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
									<div class="flex items-center">
										<div class="flex-shrink-0 w-10 h-10">
											<img class="w-full h-full rounded-full"
                                                src="https://images.unsplash.com/photo-1540845511934-7721dd7adec3?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2.2&w=160&h=160&q=80"
                                                alt="" />
                                        </div>
											<div class="ml-3">
												<p class="text-gray-900 whitespace-no-wrap">
													Dana Moore
												</p>
											</div>
										</div>
								</td>
								<td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
									<p class="text-gray-900 whitespace-no-wrap">Editor</p>
								</td>
								<td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
									<p class="text-gray-900 whitespace-no-wrap">
										Jan 10, 2020
									</p>
								<td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
									<p class="text-gray-900 whitespace-no-wrap">
										64
									</p>
								</td>
								<td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
									<span
                                        class="relative inline-block px-3 py-1 font-semibold text-orange-900 leading-tight">
                                        <span aria-hidden
                                            class="absolute inset-0 bg-orange-200 opacity-50 rounded-full"></span>
									<span class="relative">Suspended</span>
									</span>
								</td>
							</tr>
							<tr>
								<td class="px-5 py-5 bg-white text-sm">
									<div class="flex items-center">
										<div class="flex-shrink-0 w-10 h-10">
											<img class="w-full h-full rounded-full"
                                                src="https://images.unsplash.com/photo-1522609925277-66fea332c575?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2.2&h=160&w=160&q=80"
                                                alt="" />
                                        </div>
											<div class="ml-3">
												<p class="text-gray-900 whitespace-no-wrap">
													Alonzo Cox
												</p>
											</div>
										</div>
								</td>
								<td class="px-5 py-5 bg-white text-sm">
									<p class="text-gray-900 whitespace-no-wrap">Admin</p>
								</td>
								<td class="px-5 py-5 bg-white text-sm">
									<p class="text-gray-900 whitespace-no-wrap">Jan 18, 2020</p>
								</td>
								<td class="px-5 py-5 bg-white text-sm">
									<p class="text-gray-900 whitespace-no-wrap">70</p>
								</td>
								<td class="px-5 py-5 bg-white text-sm">
									<span
                                        class="relative inline-block px-3 py-1 font-semibold text-red-900 leading-tight">
                                        <span aria-hidden
                                            class="absolute inset-0 bg-red-200 opacity-50 rounded-full"></span>
									<span class="relative">Inactive</span>
									</span>
								</td>
							</tr>
						</tbody>
					</table>
					<div
						class="px-5 py-5 bg-white border-t flex flex-col xs:flex-row items-center xs:justify-between          ">
						<span class="text-xs xs:text-sm text-gray-900">
                            Showing 1 to 4 of 50 Entries
                        </span>
						<div class="inline-flex mt-2 xs:mt-0">
							<button
                                class="text-sm text-indigo-50 transition duration-150 hover:bg-indigo-500 bg-indigo-600 font-semibold py-2 px-4 rounded-l">
                                Prev
                            </button>
							&nbsp; &nbsp;
							<button
                                class="text-sm text-indigo-50 transition duration-150 hover:bg-indigo-500 bg-indigo-600 font-semibold py-2 px-4 rounded-r">
                                Next
                            </button>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
Y para no tener todos esos <div> dentro del front del componente de Livewire "ShowPost", los <div> dentro de los que está el <table> se pusieron en un componente de blade (anónimo, ósea creado directamente como archivo dentro de resources/views/components), llamado "table.blade.php" y donde originalmente iría la tabla ahora correspondería a su $slot, quedando así:
<div class="bg-white p-8 rounded-md w-full">
    <div class=" flex items-center justify-between pb-6">
        <div>
            <h2 class="text-gray-600 font-semibold">Products Oder</h2>
            <span class="text-xs">All products item</span>
        </div>
        <div class="flex items-center justify-between">
            <div class="flex bg-gray-50 items-center p-2 rounded-md">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" viewBox="0 0 20 20"
                    fill="currentColor">
                    <path fill-rule="evenodd"
                        d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z"
                        clip-rule="evenodd" />
                </svg>
                <input class="bg-gray-50 outline-none ml-1 block " type="text" name="" id=""
                    placeholder="search...">
            </div>
            <div class="lg:ml-40 ml-10 space-x-8">
                <button
                    class="bg-indigo-600 px-4 py-2 rounded-md text-white font-semibold tracking-wide cursor-pointer">New
                    Report</button>
                <button
                    class="bg-indigo-600 px-4 py-2 rounded-md text-white font-semibold tracking-wide cursor-pointer">Create</button>
            </div>
        </div>
    </div>
    <div>
        <div class="-mx-4 sm:-mx-8 px-4 sm:px-8 py-4 overflow-x-auto">
            <div class="inline-block min-w-full shadow rounded-lg overflow-hidden">

                {{ $slot }}

                <div
                    class="px-5 py-5 bg-white border-t flex flex-col xs:flex-row items-center xs:justify-between          ">
                    <span class="text-xs xs:text-sm text-gray-900">
                        Showing 1 to 4 of 50 Entries
                    </span>
                    <div class="inline-flex mt-2 xs:mt-0">
                        <button
                            class="text-sm text-indigo-50 transition duration-150 hover:bg-indigo-500 bg-indigo-600 font-semibold py-2 px-4 rounded-l">
                            Prev
                        </button>
                        &nbsp; &nbsp;
                        <button
                            class="text-sm text-indigo-50 transition duration-150 hover:bg-indigo-500 bg-indigo-600 font-semibold py-2 px-4 rounded-r">
                            Next
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
</div>
Y donde en el front del componente, quedaría algo así (posteriormente se modificó, pero se pone como estaba para entender la idea que acomodándolo así también daba el mismo resultado):
<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <x-table>
            <table class="min-w-full leading-normal">
                <thead>
                    <tr>
                        <th
                            class="px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                            Name
                        </th>
                        <th
                            class="px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                            products
                        </th>
                        <th
                            class="px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                            Created at
                        </th>
                        <th
                            class="px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                            QRT
                        </th>
                        <th
                            class="px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                            Status
                        </th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
                            <div class="flex items-center">
                                <div class="flex-shrink-0 w-10 h-10">
                                    <img class="w-full h-full rounded-full"
                                        src="https://images.unsplash.com/photo-1494790108377-be9c29b29330?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2.2&w=160&h=160&q=80"
                                        alt="" />
                                </div>
                                <div class="ml-3">
                                    <p class="text-gray-900 whitespace-no-wrap">
                                        Vera Carpenter
                                    </p>
                                </div>
                            </div>
                        </td>
                        <td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
                            <p class="text-gray-900 whitespace-no-wrap">Admin</p>
                        </td>
                        <td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
                            <p class="text-gray-900 whitespace-no-wrap">
                                Jan 21, 2020
                            </p>
                        </td>
                        <td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
                            <p class="text-gray-900 whitespace-no-wrap">
                                43
                            </p>
                        </td>
                        <td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
                            <span class="relative inline-block px-3 py-1 font-semibold text-green-900 leading-tight">
                                <span aria-hidden class="absolute inset-0 bg-green-200 opacity-50 rounded-full"></span>
                                <span class="relative">Activo</span>
                            </span>
                        </td>
                    </tr>
                    <tr>
                        <td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
                            <div class="flex items-center">
                                <div class="flex-shrink-0 w-10 h-10">
                                    <img class="w-full h-full rounded-full"
                                        src="https://images.unsplash.com/photo-1500648767791-00dcc994a43e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2.2&w=160&h=160&q=80"
                                        alt="" />
                                </div>
                                <div class="ml-3">
                                    <p class="text-gray-900 whitespace-no-wrap">
                                        Blake Bowman
                                    </p>
                                </div>
                            </div>
                        </td>
                        <td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
                            <p class="text-gray-900 whitespace-no-wrap">Editor</p>
                        </td>
                        <td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
                            <p class="text-gray-900 whitespace-no-wrap">
                                Jan 01, 2020
                            </p>
                        <td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
                            <p class="text-gray-900 whitespace-no-wrap">
                                77
                            </p>
                        </td>
                        <td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
                            <span class="relative inline-block px-3 py-1 font-semibold text-green-900 leading-tight">
                                <span aria-hidden class="absolute inset-0 bg-green-200 opacity-50 rounded-full"></span>
                                <span class="relative">Activo</span>
                            </span>
                        </td>
                    </tr>
                    <tr>
                        <td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
                            <div class="flex items-center">
                                <div class="flex-shrink-0 w-10 h-10">
                                    <img class="w-full h-full rounded-full"
                                        src="https://images.unsplash.com/photo-1540845511934-7721dd7adec3?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2.2&w=160&h=160&q=80"
                                        alt="" />
                                </div>
                                <div class="ml-3">
                                    <p class="text-gray-900 whitespace-no-wrap">
                                        Dana Moore
                                    </p>
                                </div>
                            </div>
                        </td>
                        <td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
                            <p class="text-gray-900 whitespace-no-wrap">Editor</p>
                        </td>
                        <td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
                            <p class="text-gray-900 whitespace-no-wrap">
                                Jan 10, 2020
                            </p>
                        <td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
                            <p class="text-gray-900 whitespace-no-wrap">
                                64
                            </p>
                        </td>
                        <td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
                            <span class="relative inline-block px-3 py-1 font-semibold text-orange-900 leading-tight">
                                <span aria-hidden class="absolute inset-0 bg-orange-200 opacity-50 rounded-full"></span>
                                <span class="relative">Suspended</span>
                            </span>
                        </td>
                    </tr>
                    <tr>
                        <td class="px-5 py-5 bg-white text-sm">
                            <div class="flex items-center">
                                <div class="flex-shrink-0 w-10 h-10">
                                    <img class="w-full h-full rounded-full"
                                        src="https://images.unsplash.com/photo-1522609925277-66fea332c575?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2.2&h=160&w=160&q=80"
                                        alt="" />
                                </div>
                                <div class="ml-3">
                                    <p class="text-gray-900 whitespace-no-wrap">
                                        Alonzo Cox
                                    </p>
                                </div>
                            </div>
                        </td>
                        <td class="px-5 py-5 bg-white text-sm">
                            <p class="text-gray-900 whitespace-no-wrap">Admin</p>
                        </td>
                        <td class="px-5 py-5 bg-white text-sm">
                            <p class="text-gray-900 whitespace-no-wrap">Jan 18, 2020</p>
                        </td>
                        <td class="px-5 py-5 bg-white text-sm">
                            <p class="text-gray-900 whitespace-no-wrap">70</p>
                        </td>
                        <td class="px-5 py-5 bg-white text-sm">
                            <span class="relative inline-block px-3 py-1 font-semibold text-red-900 leading-tight">
                                <span aria-hidden class="absolute inset-0 bg-red-200 opacity-50 rounded-full"></span>
                                <span class="relative">Inactive</span>
                            </span>
                        </td>
                    </tr>
                </tbody>
            </table>
        </x-table>
    </div>





Se puede enlazar un atributo (publico) del back directamente a un elemento del front en un componente de livewire (como en Angular con NgModel), de manera tal que cuando el valor de ese atributo cambie en el front también lo hará en el back y viceversa.
Esto ocurre de manera asincrona, de manera que los cambios se visualizan sin necesidad de que se recargue la página. Pero lo que realmente ocurre es que cada vez que se modifiquen los atributos de un componente o se ejecute alguna de sus funciones, se vuelve a ejecutar su función render() mostrando los cambios ya hechos (esto es un arma de doble filo, ya que si hay muchas cosas que se cargan en el render() comenzaría a significar un problema de rendimiento que se tuvieran que cargar nuevamente cada vez que se modifica el valor de alguno de los atributos o cada que se ejcuta alguna de las funciones del componente. Y se tendrían que hacer algunas cosas para evitar que se renderice cada que esto ocurre)
Ej.
back:
"
class ShowPosts extends Component
{
    public $search = "Esto es lo que se buscará";
    ...
}
"
front:
"
...
    <div class="px-6 py-4">
        <input type="text" wire:model.live="search">
    </div>
...
"

Aprovechando ese comportamiento, se implementó una búsqueda dinámica, donde dentro del render() en el back del componente, ahora en lugar de traer todos los registros de Post siempre (" Post::all() ")  ahora sería en base al valor que vaya tomando $search  en relación a lo que se vaya ingresando dentro del <input> que está directamente relacionado con ese atributo (la primera vez y mientras no se tenga valor en $search traería todos, como lo hacía antes de implementar eso), quedando:
"
public function render()
    {
        $posts = Post::where('title', 'like', '%' . $this->search . '%')
                    ->orWhere('content', 'like', '%' . $this->search . '%')
                    ->get();

        return view('livewire.show-posts', compact('posts'))
                ->layout('layouts.app');
    }
"
*En cuanto a la parte de la consulta SQL y demás, recordar que el operador "like" se usa para arrojar los resultados donde coincidan con dicho valor o que contengan en cierto atributo los caracteres ingresados, y poniendo los "%" en ambos lados es para indicar que puede haber texto tanto antes como atras en el valor que contiene dicho atributo.
*En cuanto a Eloquent, el get() es para obtener la colección resultante con los resultados de la consulta SQL
Ya con esto cada que se vaya ingresando algo en el <input> y por ende modificando el atributo "$search" se irán filtrando los valores que contendrá la colección $posts, y como se está modificando un atributo del componente se volverá a ejecutar el render() donde se pasará $posts ahora con los valores correspondientes al resultado de la consulta y se vuelve a renderizar la vista, cargando nuevamente la tabla con los resulrtados. *Se agregaron validaciones en la vista para en casos donde no haya coincidencias





Cuando se instala JetStream por defecto ya se incluyen unos componentes de blade ya hechos, ubicados en resources/views/components, que se pueden usar en los archivos .blade.php como un componente de blade normal, funcionando igual con lo de $slot, $attributes, slots con nombre, parámetros, etc.





Se implementó un sort ("acómodo") dinámico, con el que se ordenaran los registros de la tabla ya sea de forma ascendente o descendente según el campo correspondiente al encabezado sobre el cual se de clic.
*Para los iconos se empleó "Font Awesome", que es un conjunto de herramientas de fuentes e íconos basado en CSS y Less. Para poder emplearlo se descarga desde liga: https://fontawesome.com/v4/get-started/ en base a sección "Download & Customize" dando clic en opción "Download"->descomprimir el zip->la carpeta resultante (checar que dentro no haya otra contenida, si es así sería la que está contenida) copiarla y pegarla dentro de carpeta "vendor" (previamente creada dentro de carpeta "public" del proyecto)->luego, en archivo "app.blade.php" (que es la plantilla que emplean las vistas y algunos componentes creados de Livewire) hacer referencia al archivo .css con el que se emplean: " <link rel="stylesheet" href="{{ asset('vendor/font-awesome-4.7.0/css/font-awesome.css') }}"> <!--Para iconos de Font Awesome--> " (con función "asset()" se indica que se apunta a carpeta "public" del proyecto, y ya lo que va dentro es lo que sigue de la ruta, como las carpetas y archivos que van dentro y a los que se hará referencia en específico)

En el back de componente ShowPosts, archivo "ShowPosts.php" se agregó:
"
public $sort = 'id';
public $direction = 'desc';
"
que serían los atributos mediante los cuales se manejarían los aspectos de a qué campo se hará referencia y mediante el cual se ordenaran los registros en un momento dado ($sort) así como si será de forma ascendete o descendente ($direction). Al inicializarlos con 'id' y 'desc' respectivamente, los registros se mostrarán así en primera instancia, de mayor a menor id, cuando se cargue por primera vez la página y hasta que se haga un cambio.
En su función render() se modificó la consulta que obtiene los registros que se mostraran, que será lo que se contendrá en atributo $posts en un momento dado, agregando " ->orderBy($this->sort, $this->direction) " para la parte del acomodo, quedando:
"
$posts = Post::where('title', 'like', '%' . $this->search . '%')
                    ->orWhere('content', 'like', '%' . $this->search . '%')
                    ->orderBy($this->sort, $this->direction)
                    ->get();
"
en la función orderBy de Eloquent, primero se recibe como parámetro el campo de la tabla mediante el cual se hará el acomodo y después si este será ascendente ('asc') o descendente ('desc')
Y se agregó una función "order()" que tendrá la lógica en base a la cual se hará el acomodo:
"
public function order($sort){

        if($this->sort == $sort){
            if($this->direction == 'desc'){
                $this->direction = 'asc';
            }else{
                $this->direction = 'desc';
            }
        }else{
            $this->sort = $sort;
            $this->direction = 'asc';
        }
    }
"
donde básicamente se irán cambiando los valores a los atributos $sort y $direction, que son en base a los cualés se estará haciendo el acomodo desde la consulta con Eloquent. Este método se irá llamando cada que se haga clic sobre cada uno de los encabezados de la tabla en la vista, y donde cada uno tendrá el valor correspondiente a $sort al que hagan referencia. Y como se está cambiando algo del componente desde el back recordar que por esto se vuelve a ejecutar función "render()" por lo que la tabla se mostrara ahora con el acomodo correspondiente sinrefrescar la página.

En el front, archivo "show-posts.blade.php" a cada encabezado se le agregó:
"
{{-- Sort --}}
                            @if ($sort=='id')

                                @if ($direction == 'asc')
                                    <i class="fa fa-sort-alpha-asc float-right mt-1" aria-hidden="true"></i>
                                @else
                                    <i class="fa fa-sort-alpha-desc float-right mt-1" aria-hidden="true"></i>
                                @endif

                            @else
                                <i class="fa fa-sort float-right mt-1" aria-hidden="true"></i>
                            @endif
"
*Donde está lo de " $sort=='' " ya iría el nombre al campo correspondiente dentro de las ''.
Y donde se valida también el icono a mostrar según si ya se ha hecho clic y cambiando el acomodo en el campo correspondiente.





--